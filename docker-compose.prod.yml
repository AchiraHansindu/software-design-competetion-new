version: '3.8'

# Production Docker Compose Configuration
# Use with: docker-compose -f docker-compose.prod.yml up

services:
  # MySQL Database Service - Production
  mysql-db:
    image: mysql:8.0
    container_name: transformer-mysql-prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./init-db:/docker-entrypoint-initdb.d
      - ./mysql-conf:/etc/mysql/conf.d
    networks:
      - transformer-prod-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Spring Boot Backend Service - Production
  backend:
    build:
      context: ./Back-end/software-design-project-final
      dockerfile: Dockerfile
    container_name: transformer-backend-prod
    restart: unless-stopped
    depends_on:
      mysql-db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_URL: ${DB_URL}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DDL_AUTO: ${DB_DDL_AUTO:-validate}
      SERVER_PORT: ${SERVER_PORT:-8080}
      FILE_UPLOAD_DIR: ${FILE_UPLOAD_DIR:-/app/uploads/images/}
      FILE_MAX_FILE_SIZE: ${FILE_MAX_FILE_SIZE:-10485760}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      LOG_ROOT_LEVEL: ${LOG_ROOT_LEVEL:-WARN}
      LOG_APP_LEVEL: ${LOG_APP_LEVEL:-INFO}
      JAVA_OPTS: "-Xms512m -Xmx1g -XX:+UseG1GC"
    ports:
      - "${SERVER_PORT:-8080}:8080"
    volumes:
      - backend_prod_uploads:/app/uploads/images
      - app_logs:/app/logs
    networks:
      - transformer-prod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: transformer-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-conf:/etc/nginx/conf.d
      - ./ssl-certs:/etc/nginx/ssl
      - backend_prod_uploads:/var/www/uploads:ro
    depends_on:
      - backend
    networks:
      - transformer-prod-network

# Named volumes for production data persistence
volumes:
  mysql_prod_data:
    driver: local
  backend_prod_uploads:
    driver: local
  app_logs:
    driver: local

# Production network
networks:
  transformer-prod-network:
    driver: bridge
