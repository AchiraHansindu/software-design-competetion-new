version: '3.8'

# Load environment variables from .env file
# Create .env file in the same directory as this docker-compose.yml

services:
  # MySQL Database Service
  mysql-db:
    image: mysql:8.0
    container_name: transformer-mysql
    restart: unless-stopped
    env_file:
      - ./Back-end/software-design-project-final/.env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - transformer-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Spring Boot Backend Service
  backend:
    build:
      context: ./Back-end/software-design-project-final
      dockerfile: Dockerfile
    container_name: transformer-backend
    restart: unless-stopped
    env_file:
      - ./Back-end/software-design-project-final/.env
    depends_on:
      mysql-db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DB_URL: ${DB_URL}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DDL_AUTO: ${DB_DDL_AUTO}
      SERVER_PORT: ${SERVER_PORT}
      FILE_UPLOAD_DIR: ${FILE_UPLOAD_DIR}
      FILE_MAX_FILE_SIZE: ${FILE_MAX_FILE_SIZE}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      LOG_ROOT_LEVEL: ${LOG_ROOT_LEVEL}
      LOG_APP_LEVEL: ${LOG_APP_LEVEL}
    ports:
      - "${SERVER_PORT:-8080}:8080"
    volumes:
      - backend_uploads:/app/uploads/images
    networks:
      - transformer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # React Frontend Service (Optional - for complete containerization)
  frontend:
    build:
      context: ./Front-end
      dockerfile: Dockerfile
    container_name: transformer-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      REACT_APP_API_BASE_URL: http://backend:8080
    ports:
      - "3000:3000"
    networks:
      - transformer-network

# Named volumes for data persistence
volumes:
  mysql_data:
    driver: local
  backend_uploads:
    driver: local

# Custom network for service communication
networks:
  transformer-network:
    driver: bridge
