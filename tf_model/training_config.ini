# YOLOv11 Segmentation Training Configuration
# ===========================================
# 
# Edit these parameters to customize your training
# Save this file and run your Python training script

[model]
# Model size: yolo11n-seg.pt (nano), yolo11s-seg.pt (small), yolo11m-seg.pt (medium), yolo11l-seg.pt (large), yolo11x-seg.pt (extra large)
model_name = yolo11n-seg.pt

[dataset]
# Path to your dataset YAML file (relative to this config file)
data_path = dataset/data.yaml

[training]
# Number of training epochs
epochs = 100

# Image size for training (usually 640, 1024, or 1280)
image_size = 640

# Batch size (-1 for automatic, or specify manually like 16, 32)
batch_size = 16

# Device to use: 0 for GPU, cpu for CPU
device = 0

# Project directory for saving results
project_dir = runs

# Name for this training run (will create subfolder)
experiment_name = seg_yolo11_custom

# Patience for early stopping (epochs without improvement)
patience = 100

# Save checkpoint every N epochs
save_period = 10

[optimization]
# Initial learning rate
learning_rate = 0.01

# Final learning rate (as fraction of initial)
final_lr_ratio = 0.01

# Momentum
momentum = 0.937

# Weight decay (L2 regularization)
weight_decay = 0.0005

# Warmup epochs
warmup_epochs = 3.0

# Enable Automatic Mixed Precision (faster training)
use_amp = true

# Use image caching (faster but uses more memory)
use_cache = false

[augmentation]
# Data augmentation parameters
# HSV color space augmentation
hsv_h = 0.015  # Hue
hsv_s = 0.7    # Saturation  
hsv_v = 0.4    # Value

# Geometric augmentations
rotation_degrees = 0.0      # Rotation range in degrees
translation = 0.1           # Translation as fraction of image
scale_factor = 0.5          # Scaling factor
shear_degrees = 0.0         # Shear range in degrees
perspective = 0.0           # Perspective transformation

# Flip probabilities
flip_horizontal = 0.5       # Horizontal flip probability
flip_vertical = 0.0         # Vertical flip probability

# Advanced augmentations
mosaic_prob = 1.0          # Mosaic augmentation probability
mixup_prob = 0.0           # Mixup augmentation probability
copy_paste_prob = 0.0      # Copy-paste augmentation probability

[loss]
# Loss function weights
box_loss_gain = 7.5        # Bounding box loss multiplier
class_loss_gain = 0.5      # Classification loss multiplier
dfl_loss_gain = 1.5        # Distribution focal loss multiplier

[output]
# Output options
save_plots = true          # Save training plots
verbose_output = true      # Detailed console output
save_predictions = false   # Save prediction images during validation